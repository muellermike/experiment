# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from models.base_model_ import Model
import util


class Experiment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, start: datetime=None, end: datetime=None, user: int=None, image_time: str=None):  # noqa: E501
        """Experiment - a model defined in Swagger

        :param id: The id of this Experiment.  # noqa: E501
        :type id: int
        :param start: The start of this Experiment.  # noqa: E501
        :type start: datetime
        :param end: The end of this Experiment.  # noqa: E501
        :type end: datetime
        :param user: The user of this Experiment.  # noqa: E501
        :type user: int
        """
        self.swagger_types = {
            'id': int,
            'start': datetime,
            'end': datetime,
            'user': int,
            'image_time': str
        }

        self.attribute_map = {
            'id': 'id',
            'start': 'start',
            'end': 'end',
            'user': 'user',
            'image_time': 'imageTime'
        }

        self._id = id
        self._start = start
        self._end = end
        self._user = user
        self._image_time = image_time

    @classmethod
    def from_dict(cls, dikt) -> 'Experiment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Experiment of this Experiment.  # noqa: E501
        :rtype: Experiment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Experiment.


        :return: The id of this Experiment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Experiment.


        :param id: The id of this Experiment.
        :type id: int
        """

        self._id = id

    @property
    def start(self) -> datetime:
        """Gets the start of this Experiment.


        :return: The start of this Experiment.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start: datetime):
        """Sets the start of this Experiment.


        :param start: The start of this Experiment.
        :type start: datetime
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def end(self) -> datetime:
        """Gets the end of this Experiment.


        :return: The end of this Experiment.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end: datetime):
        """Sets the end of this Experiment.


        :param end: The end of this Experiment.
        :type end: datetime
        """

        self._end = end

    @property
    def user(self) -> int:
        """Gets the user of this Experiment.


        :return: The user of this Experiment.
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user: int):
        """Sets the user of this Experiment.


        :param user: The user of this Experiment.
        :type user: int
        """

        self._user = user

    @property
    def image_time(self) -> str:
        """Gets the image_time of this Experiment.


        :return: The image_time of this Experiment.
        :rtype: str
        """
        return self._image_time

    @image_time.setter
    def image_time(self, image_time: str):
        """Sets the image_time of this Experiment.


        :param user: The image_time of this Experiment.
        :type user: str
        """

        self._image_time = image_time