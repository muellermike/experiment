# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from models.base_model_ import Model
import util


class Exercise(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, question: str=None, mimetype: str=None, encoded_string: str=None):  # noqa: E501
        """Exercise - a model defined in Swagger

        :param id: The id of this Exercise.  # noqa: E501
        :type id: int
        :param question: The question of this Exercise.  # noqa: E501
        :type question: str
        :param mimetype: The mimetype of this Exercise.  # noqa: E501
        :type mimetype: str
        :param encoded_string: The encoded_string of this Exercise.  # noqa: E501
        :type encoded_string: str
        """
        self.swagger_types = {
            'id': int,
            'question': str,
            'mimetype': str,
            'encoded_string': str
        }

        self.attribute_map = {
            'id': 'id',
            'question': 'question',
            'mimetype': 'mimetype',
            'encoded_string': 'encodedString'
        }

        self._id = id
        self._question = question
        self._mimetype = mimetype
        self._encoded_string = encoded_string

    @classmethod
    def from_dict(cls, dikt) -> 'Exercise':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Exercise of this Exercise.  # noqa: E501
        :rtype: Exercise
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Exercise.


        :return: The id of this Exercise.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Exercise.


        :param id: The id of this Exercise.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def question(self) -> str:
        """Gets the question of this Exercise.


        :return: The question of this Exercise.
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question: str):
        """Sets the question of this Exercise.


        :param question: The question of this Exercise.
        :type question: str
        """

        self._question = question

    @property
    def mimetype(self) -> str:
        """Gets the mimetype of this Exercise.


        :return: The mimetype of this Exercise.
        :rtype: str
        """
        return self._mimetype

    @mimetype.setter
    def mimetype(self, mimetype: str):
        """Sets the mimetype of this Exercise.


        :param mimetype: The mimetype of this Exercise.
        :type mimetype: str
        """

        self._mimetype = mimetype

    @property
    def encoded_string(self) -> str:
        """Gets the encoded_string of this Exercise.


        :return: The encoded_string of this Exercise.
        :rtype: str
        """
        return self._encoded_string

    @encoded_string.setter
    def encoded_string(self, encoded_string: str):
        """Sets the encoded_string of this Exercise.


        :param encoded_string: The encoded_string of this Exercise.
        :type encoded_string: str
        """

        self._encoded_string = encoded_string
